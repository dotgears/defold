#! /usr/bin/env python

import Task, TaskGen, Options
from TaskGen import extension, declare_extension
import os, sys, glob, re
import waf_gamesys

def build(bld):
    defines = ['_XBOX'] #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
    if bld.env.PLATFORM in ('armv7-darwin', 'arm64-darwin', 'x86_64-ios'):
        defines = ['DM_NO_SYSTEM_FUNCTION'] # Needed because we wish to build the tests for all platforms, but not all platforms have the system() function

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram test',
        uselib = 'RECORD CRASH VPX PROFILEREXT GAMEOBJECT DDF RESOURCE GAMESYS GRAPHICS_NULL GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID_NULL INPUT PARTICLE RIG GUI SOUND_NULL DLIB DMGLFW LIVEUPDATE CARES',
        exported_symbols = ['ProfilerExt', 'GraphicsAdapterNull'],
        uselib_local = 'engine engine_service',
        web_libs = ['library_sys.js', 'library_script.js'],
        includes = '../../proto .',
        defines = defines,
        source = 'test_engine.cpp',
        target = 'test_engine')

    obj.install_path = None

    # Psapi.lib is needed by ProfilerExt
    if 'win32' in bld.env.BUILD_PLATFORM:
        obj.env.append_value('LINKFLAGS', ['Psapi.lib'])

    builtins_src = "content/builtins"
    builtins_dst = "src/test/builtins"

    bob_flags = []
    if Options.options.use_vanilla_lua:
        bob_flags.append("--use-vanilla-lua")

    # Build engine test content using bob
    # We always run distclean. Hook into waf clean/distclean in some way?
    bld.new_task_gen(rule = 'java -jar ${SRC[0].abspath(env)} -r ${SRC[1].src_dir(env)} distclean build %s' % ' '.join(bob_flags),
                     source = '../../content/bob-engine.jar wscript',
                     always = True)

