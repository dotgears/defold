#! /usr/bin/env python
import os, re
from waf_dynamo import copy_file_task, apidoc_extract_task
import Options

def set_options(opt):
    pass

def build(bld):
    obj = bld.new_task_gen(features = 'cxx cstaticlib embed',
                           includes = '. ..',
                           source = 'engine_service.cpp',
                           target = 'engine_service',
                           embed_source = '../content/profiler.html')

    obj = bld.new_task_gen(features = 'cxx cstaticlib',
                           includes = '. ..',
                           source = 'engine_service_null.cpp',
                           target = 'engine_service_null')

    obj = bld.new_task_gen(features = 'cxx cstaticlib ddf embed',
                          includes = '../proto . ..',
                          target = 'engine',
                          proto_gen_py = True,
                          protoc_includes = ['../proto', bld.env['PREFIX'] + '/share'],
                          embed_source='../content/materials/debug.vpc ../content/materials/debug.fpc ../content/builtins/connect/connect.project ../content/builtins.arci ../content/builtins.arcd ../content/builtins.dmanifest',
                          source='engine.cpp engine_main.cpp physics_debug_render.cpp ../proto/engine_ddf.proto',
                          uselib_local = 'engine_service')

    obj = bld.new_task_gen(features = 'cxx cstaticlib ddf embed',
                          includes = '../proto . ..',
                          target = 'engine_release',
                          defines = 'DM_RELEASE=1',
                          proto_gen_py = True,
                          protoc_includes = ['../proto', bld.env['PREFIX'] + '/share'],
                          embed_source='../content/materials/debug.vpc ../content/materials/debug.fpc ../content/builtins_release.arci ../content/builtins_release.arcd ../content/builtins_release.dmanifest', # for draw_line/draw_text
                          source='engine.cpp engine_main.cpp ../proto/engine_ddf.proto',
                          uselib_local = 'engine_service_null')

    bld.install_files('${PREFIX}/include/engine', 'engine.h')
    bld.install_files('${PREFIX}/share/proto', '../proto/engine_ddf.proto')

    additional_libs = ['CRASH']
    exported_symbols = ['DefaultSoundDevice', 'NullSoundDevice', 'AudioDecoderWav', 'CrashExt', 'ProfilerExt']

    exported_symbols.append('TapticEngine')

    # Add stb_vorbis and/or tremolo depending on platform
    if 'web' in bld.env['PLATFORM'] or 'win32' in bld.env['PLATFORM']:
        exported_symbols.append('AudioDecoderStbVorbis')
    else:
        exported_symbols.append('AudioDecoderStbVorbis')
        exported_symbols.append('AudioDecoderTremolo')
        additional_libs.append('TREMOLO')

    if 'win32' in bld.env['PLATFORM']:
        exported_symbols.append('FacebookExt')
        exported_symbols.append('IAPExt')

    # Set graphics library to use
    graphics_lib = 'GRAPHICS'
    graphics_lib_symbols = 'GraphicsAdapterOpenGL'
    if Options.options.with_vulkan:
        graphics_lib = 'GRAPHICS_VULKAN'
        graphics_lib_symbols = 'GraphicsAdapterVulkan'

    exported_symbols.append(graphics_lib_symbols)

    mobile_service_symbols = ['IACExt', 'IAPExt',
                              'PushExt', 'WebViewExt']
    if bld.env['PLATFORM'] in ('armv7-darwin', 'arm64-darwin', 'x86_64-ios'):
        exported_symbols.extend(mobile_service_symbols)
        exported_symbols.append('FacebookExt')


    if 'android' in bld.env['PLATFORM']:
        sound_lib = 'SOUND OPENAL_SOFT OPENSLES'
        exported_symbols.extend(mobile_service_symbols)
        exported_symbols.append('FacebookExt')
        additional_libs.append('UNWIND')
        additional_libs.append('CPP_RUNTIME')
    elif 'web' in bld.env['PLATFORM']:
        sound_lib = 'SOUND OPENAL'
        exported_symbols.append('FacebookExt')
        exported_symbols.append('IAPExt')
    else:
        sound_lib = 'SOUND OPENAL'

    additional_libs = ' '.join(additional_libs)

    dynamo_home = os.getenv('DYNAMO_HOME')

    android_jar_paths = [
              '%s/ext/share/java/android-support-multidex.jar' % (dynamo_home),
              '%s/share/java/glfw_android.jar' % (dynamo_home),
              '%s/share/java/gamesys_android.jar' % (dynamo_home),
              '%s/share/java/sound_android.jar' % (dynamo_home)]

    web_libs = ['library_glfw.js', 'library_sys.js', 'library_script.js', 'library_sound.js']

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram apk web extract_symbols',
        uselib = 'WEBVIEWEXT PROFILEREXT FACEBOOKEXT IAPEXT TAPTICENGINE PUSHEXT IACEXT RECORD VPX GAMEOBJECT DDF RESOURCE GAMESYS %s GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID INPUT PARTICLE RIG DLIB DMGLFW GUI CRASH LIVEUPDATE CARES %s X %s' % (graphics_lib, sound_lib, additional_libs),
        uselib_local = 'engine engine_service',
        web_libs = web_libs,
        exported_symbols = exported_symbols,
        includes = '../build ../proto . ..',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine',
        bundleid = 'com.defold.engine',
        source=['main.cpp'],
        proguard = ['../content/builtins/manifests/android/dmengine.pro'],
        jars = android_jar_paths)

    if 'win32' in bld.env.BUILD_PLATFORM:
        obj.source.append('engine.rc') # Needs to bundle with icons, or IconExe.java won't be able to replace them (it cannot add them)
        obj.env.append_value('LINKFLAGS', ['Psapi.lib'])

    if 'win32' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/lib/%s' % bld.env['PLATFORM'], 'defold.ico')
        bld.install_files('${PREFIX}/lib/%s' % bld.env['PLATFORM'], 'engine.rc')

    if 'android' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/share/java', 'dmengine.android/classes.dex')
        bld.install_files('${PREFIX}/bin/${PLATFORM}', 'dmengine.android/dmengine.apk')

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram apk web extract_symbols',
        uselib='WEBVIEWEXT PROFILEREXT_NULL FACEBOOKEXT IAPEXT TAPTICENGINE PUSHEXT IACEXT RECORD VPX GAMEOBJECT DDF RESOURCE GAMESYS %s GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID INPUT PARTICLE RIG DLIB DMGLFW GUI CRASH LIVEUPDATE CARES %s X %s' % (
            graphics_lib, sound_lib, additional_libs),
        uselib_local = 'engine_release engine_service_null',
        web_libs = web_libs,
        exported_symbols = exported_symbols,
        includes = '../build ../proto . ..',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX DM_RELEASE=1',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine_release',
        source=['main.cpp'],
        jars = android_jar_paths)

    if 'win32' in bld.env.BUILD_PLATFORM:
        obj.source.append('engine.rc')
        obj.env.append_value('LINKFLAGS', ['/SUBSYSTEM:WINDOWS', '/ENTRY:mainCRTStartup', 'Psapi.lib'])

    # We need to link with GLFW on Android for the headless version of the engine.
    # Android expects a slighly different life cycle handling, currently handled
    # in the GLFW module.
    additional_libs = []
    if 'android' in bld.env['PLATFORM']:
        additional_libs += ['DMGLFW','UNWIND']

    additional_libs = ' '.join(additional_libs)

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram apk web extract_symbols',
        uselib = 'RECORD_NULL GAMEOBJECT PROFILEREXT DDF RESOURCE GAMESYS GRAPHICS_NULL GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID_NULL INPUT PARTICLE RIG GUI CRASH DLIB LIVEUPDATE SOUND_NULL CRASH CARES %s' % (additional_libs,),
        exported_symbols = ['ProfilerExt', 'GraphicsAdapterNull'],
        uselib_local = 'engine engine_service',
        web_libs = web_libs,
        includes = '../build ../proto . ..',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine_headless',
        source=['main.cpp'])

    if 'win32' in bld.env.BUILD_PLATFORM:
        obj.source.append('engine.rc')
        obj.env.append_value('LINKFLAGS', ['Psapi.lib'])

    apidoc_extract_task(bld, ['../proto/engine_ddf.proto', 'engine_doc.h'])

    if 'win32' in bld.env.PLATFORM:
        src_dir = "%s/ext/lib/%s" % (bld.env.PREFIX, bld.env.PLATFORM)
        install_path = bld.get_install_path("${PREFIX}/bin/${PLATFORM}")
        task = copy_file_task(bld, "%s/OpenAL32.dll" % src_dir)
        task.install_path = install_path
        task = copy_file_task(bld, "%s/wrap_oal.dll" % src_dir)
        task.install_path = install_path

    if not Options.options.skip_build_tests:
        bld.add_subdirs('test')

def configure(conf):
    pass
