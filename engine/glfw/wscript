#! /usr/bin/env python

VERSION = '2.7.1'
APPNAME = 'glfw'

srcdir = '.'
blddir = 'build'

import os, sys, re

import waf_ddf, waf_dynamo
import Options

def init():
    pass

def set_options(opt):
    opt.tool_options('waf_dynamo')

def configure(conf):
    conf.check_tool('waf_dynamo')
    conf.check_tool('java')
    waf_ddf.configure(conf)

    platform = conf.env.PLATFORM

    if platform == "linux" or platform == "x86_64-linux":
        conf.env.append_value('CCFLAGS', ['-DGL_GLEXT_PROTOTYPES', '-D_GLFW_HAS_GLXGETPROCADDRESS', '-D_GLFW_USE_LINUX_JOYSTICKS', '-D_GLFW_HAS_PTHREAD', '-D_GLFW_HAS_SCHED_YIELD', '-D_GLFW_HAS_SYSCONF'])

    dynamo_home = conf.env.DYNAMO_HOME
    if not dynamo_home:
        conf.fatal("DYNAMO_HOME not set")
    dynamo_ext = os.path.join(dynamo_home, "ext")

    if platform == 'darwin' or platform == 'x86_64-darwin':
        conf.env.append_value('LINKFLAGS', ['-framework', 'Cocoa', '-framework', 'IOKit', '-framework', 'CoreVideo'])
        if not Options.options.with_vulkan:
            conf.env.append_value('LINKFLAGS', ['-framework', 'OpenGL', '-framework', 'AGL'])
    elif platform in ('armv7-darwin', 'arm64-darwin', 'x86_64-ios'):
        conf.env.append_value('LINKFLAGS', ['-framework', 'UIKit', '-framework', 'QuartzCore', '-framework', 'CoreGraphics'])
        if not Options.options.with_vulkan:
            conf.env.append_value('LINKFLAGS', ['-framework', 'OpenGLES'])
    elif re.match('arm.*?android', platform):
        conf.env.append_value('LINKFLAGS', ['-lEGL', '-lGLESv1_CM', '-lGLESv2', '-landroid'])
    elif platform == "linux" or platform == "x86_64-linux":
        conf.env['LIB_X'] = ['Xext', 'X11', 'Xi', 'GL', 'GLU']
    elif 'win32' in platform:
        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'xinput9_1_0.lib', 'glu32.lib'])

    conf.env.append_value('CPPPATH', "../src")
    conf.env.append_value('CCDEFINES', 'SDL_JOYSTICK_IOKIT')
    conf.env.append_value('CXXDEFINES', 'SDL_JOYSTICK_IOKIT')

def build(bld):
    bld.add_subdirs('lib')
    bld.install_files('${PREFIX}/include/graphics/glfw', 'include/GL/glfw.h')
    bld.install_files('${PREFIX}/include/graphics/glfw', 'include/GL/glfw_native.h')

    if 'android' in bld.env['PLATFORM']:
        classpath = ['%s/ext/share/java/android.jar' % bld.env.DYNAMO_HOME];
        classpath = os.pathsep.join(classpath)

        bld.new_task_gen(features='javac seq',
                         classpath=classpath,
                         source_root='java')

        bld.env["JAVACFLAGS"] = '-g -source 1.7 -target 1.7'

        bld.new_task_gen(features='jar seq',
                         basedir='java',
                         destfile='glfw_android.jar')

        bld.install_files('${PREFIX}/share/java', 'glfw_android.jar')
    if 'web' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/lib/%s/js' % bld.env['PLATFORM'], 'js/library_glfw.js')

def shutdown():
    waf_dynamo.run_tests(valgrind = True)
