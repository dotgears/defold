#! /usr/bin/env python

VERSION='0.1'
APPNAME='gamesys'

srcdir = '.'
blddir = 'build'

import sys, os, re
import waf_ddf, waf_graphics, waf_dynamo, waf_physics, waf_render
from waf_dynamo import platform_supports_feature

def init():
    pass

def set_options(opt):
    opt.sub_options('src')
    opt.tool_options('waf_dynamo')

def configure(conf):
    conf.check_tool('waf_dynamo')
    conf.check_tool('java')

    waf_ddf.configure(conf)
    waf_graphics.configure(conf)
    waf_physics.configure(conf)
    waf_render.configure(conf)

    platform = conf.env['PLATFORM']

    if platform == "darwin" or platform == "x86_64-darwin":
        conf.env.append_value('LINKFLAGS', ['-framework', 'Cocoa', '-framework', 'OpenGL', '-framework', 'OpenAL', '-framework', 'AGL', '-framework', 'IOKit', '-framework', 'Carbon', '-framework', 'CoreVideo', '-framework', 'QuartzCore'])
    elif platform in ('armv7-darwin', 'arm64-darwin', 'x86_64-ios'):
        pass
    elif re.match('arm.*?android', platform):
        conf.env.append_value('LINKFLAGS', ['-lEGL', '-lGLESv1_CM', '-lGLESv2', '-landroid'])
    elif platform == "linux" or platform == "x86_64-linux":
        conf.env['LIB_X'] = ['Xext', 'X11', 'Xi', 'GL', 'GLU']
    elif "win32" in platform:
        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'shell32.lib', 'xinput9_1_0.lib'])

    conf.env.append_value('CPPPATH', "default/src")
    conf.env['STATICLIB_DLIB'] = ['dlib', 'mbedtls']
    conf.env['STATICLIB_DDF'] = 'ddf'
    conf.env['STATICLIB_RESOURCE'] = 'resource'
    conf.env['STATICLIB_GAMEOBJECT'] = 'gameobject'
    conf.env['STATICLIB_EXTENSION'] = 'extension'
    conf.env['STATICLIB_SCRIPT'] = 'script'
    conf.env['STATICLIB_RENDER'] = 'render'
    conf.env['STATICLIB_GRAPHICS_NULL'] = 'graphics_null'
    conf.env['STATICLIB_PARTICLE'] = 'particle'
    conf.env['STATICLIB_RIG'] = 'rig'
    conf.env['STATICLIB_GUI'] = 'gui'
    conf.env['STATICLIB_SOUND_NULL'] = 'sound_null'
    conf.env['STATICLIB_INPUT'] = 'input'
    conf.env['STATICLIB_HID'] = 'hid'
    conf.env['STATICLIB_HID_NULL'] = 'hid_null'
    conf.env['STATICLIB_LIVEUPDATE'] = 'liveupdate'

    conf.env['STATICLIB_GRAPHICS'] = []
    if platform_supports_feature(platform, 'opengl', {}):
        conf.env['STATICLIB_GRAPHICS'].append('graphics')
    if platform_supports_feature(platform, 'vulkan', {}):
        conf.env['STATICLIB_GRAPHICS'].append('graphics_vulkan')

    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="GAMESYS"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="GAMESYS"')

    conf.sub_config('src')

def build(bld):
    sys.path.insert(0, bld.path.find_dir('src').abspath())
    sys.path.insert(0, os.path.abspath('build/default/proto'))
    sys.path.insert(0, os.path.join(bld.env.PREFIX, 'lib/python/gameobject'))

    bld.add_subdirs('content')
    bld.add_group()
    bld.add_subdirs('src')

import Build, Options
import os, subprocess
def shutdown():
    if not Options.commands['build']:
        return
    waf_dynamo.run_tests(valgrind = True)
