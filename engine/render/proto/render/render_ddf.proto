package dmRenderDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.render.proto";
option java_outer_classname = "Render";

message RenderPrototypeDesc
{
    message MaterialDesc
    {
        required string name = 1;
        required string material = 2 [(resource) = true];
    }

    required string script = 1 [(resource) = true];
    repeated MaterialDesc materials = 2;
}

/*# Rendering API documentation
 *
 * @document
 * @name Render
 * @namespace render
 */

message DrawText
{
    required dmMath.Point3 position = 1;
    required string text = 2;
}

/*# draw a text on the screen
 * Draw a text on the screen. This should be used for debugging purposes only.
 *
 * @message
 * @name draw_debug_text
 * @param position [type:vector3] position of the text
 * @param text [type:string] the text to draw
 * @param color [type:vector4] color of the text
 * @examples
 *
 * ```lua
 * msg.post("@render:", "draw_debug_text", { text = "Hello world!", position = vmath.vector3(200, 200, 0), color = vmath.vector4(1, 0, 0, 1) } )
 * ```
 */
message DrawDebugText
{
    required dmMath.Point3 position = 1;
    required string text = 2;
    required dmMath.Vector4 color = 3;
}

/*# draw a line on the screen
 * Draw a line on the screen. This should mostly be used for debugging purposes.
 *
 * @message
 * @name draw_line
 * @param start_point [type:vector3] start point of the line
 * @param end_point [type:vector3] end point of the line
 * @param color [type:vector4] color of the line
 * @examples
 *
 * ```lua
 * -- draw a white line from (200, 200) to (200, 300)
 * msg.post("@render:", "draw_line", { start_point = vmath.vector3(200, 200, 0), end_point = vmath.vector3(200, 300, 0), color = vmath.vector4(1, 1, 1, 1) } )
 * ```
 */
message DrawLine
{
    required dmMath.Point3 start_point = 1;
    required dmMath.Point3 end_point = 2;
    required dmMath.Vector4 color = 3;
}
/*# draw a line on the screen
 * Draw a line on the screen. This should mostly be used for debugging purposes.
 *
 * @message
 * @name draw_circle
 * @param radius [type:float] radius of the circle
 * @param segment [type:int] segment amount
 * @param angle_begin [type:float] begin angle
 * @param angle_end [type:float] end angle 
 * @param position [type:vector3] position of the circle
 * @param color [type:vector4] color of the circle
 * @examples
 *
 * ```lua
 * -- draw a white line from (200, 200) to (200, 300)
 * msg.post("@render:", "draw_circle", { 
     radius = 10, 
     segment = 32,
     angle_begin = 180,
     angle_begin = 360,
     position = vmath.vector3(200, 200, 0), 
     color = vmath.vector4(1, 1, 1, 1) } )
 * ```
 */
message DrawCircle
{
    required float radius = 1;
    required uint32 segment = 2;
    required float angle_begin = 3;
    required float angle_end = 4;
    required dmMath.Point3 position= 5;
    required dmMath.Vector4 color = 6;
}
/*# draw a rectangle on the screen
 * Draw a line on the screen. This should mostly be used for debugging purposes.
 *
 * @message
 * @name draw_rectangle
 * @param v1 [type:vector3] v1 of the rectangle
 * @param color [type:vector4] color of the line
 * @examples
 *
 * ```lua
 * -- draw a white rectangle
 * msg.post("@render:", "draw_rectangle", { v1 = vmath.vector3(200, 200, 0), v2 = vmath.vector3(200, 300, 0), v3 = vmath.vector3(200, 300, 0) ,v4 = vmath.vector3(200, 300, 0), color = vmath.vector4(1, 1, 1, 1) } )
 * ```
 */
message DrawRectangle
{
    required dmMath.Point3 v1 = 1;
    required dmMath.Point3 v2 = 2;
    required dmMath.Point3 v3 = 3;
    required dmMath.Point3 v4 = 4;
    required dmMath.Vector4 color = 5;
}

/*# reports a window size change
 * Reports a change in window size. This is initiated on window resize on desktop or by orientation changes
 * on mobile devices.
 *
 * @message
 * @name window_resized
 * @param height [type:number] the new window height
 * @param width [type:number] the new window width
 * @examples
 *
 * ```lua
 * function on_message(self, message_id, message)
 *     -- check for the message
 *     if message_id == hash("window_resized") then
 *         -- the window was resized.
 *     end
 * end
 * ```
 */
message WindowResized
{
    required uint32 width = 1;
    required uint32 height = 2;
}

/*# resizes the window
 * Set the size of the game window. Only works on desktop platforms.
 *
 * @message
 * @name resize
 * @param height [type:number] the new window height
 * @param width [type:number] the new window width
 * @examples
 *
 * ```lua
 * msg.post("@render:", "resize", { width = 1024, height = 768 } )
 * ```
 */
message Resize
{
    required uint32 width = 1;
    required uint32 height = 2;
}

/*# set clear color
 * Set render clear color. This is the color that appears on the screen where nothing is rendered, i.e. background.
 *
 * @message
 * @name clear_color
 * @param color [type:vector4] color to use as clear color
 * @examples
 *
 * ```lua
 * msg.post("@render:", "clear_color", { color = vmath.vector4(1, 0, 0, 0) } )
 * ```
 */
message ClearColor
{
    required dmMath.Vector4 color = 1;
}

message DisplayProfileQualifier
{
    required uint32 width   = 1;
    required uint32 height  = 2;
    repeated string device_models = 3;
}

message DisplayProfile
{
    required string name    = 1;
    repeated DisplayProfileQualifier qualifiers = 2;
}

message DisplayProfiles
{
    repeated DisplayProfile profiles = 1;
}
