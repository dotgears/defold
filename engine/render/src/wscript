#! /usr/bin/env python

import os, sys
import waf_graphics, waf_dynamo
from waf_dynamo import apidoc_extract_task

def set_options(opt):
    pass

def configure(cont):
    pass

def build(bld):
    obj = bld.new_task_gen(features = 'cxx cstaticlib ddf',
                           includes = ['.', '../build/default/proto'],
                           proto_gen_py = True,
                           protoc_includes = '../proto',
                           target = 'render')

    obj.find_sources_in_dirs('. ../proto/render render', exts = ['.cpp', '.proto'])
    #obj.source.append('../proto/render_ddf.proto')

    bld.add_subdirs('test')

    bld.install_files('${PREFIX}/include/render', 'render/font_renderer.h')
    bld.install_files('${PREFIX}/include/render', 'render/display_profiles.h')
    bld.install_files('${PREFIX}/include/render', 'render/render.h')

    bld.install_files('${PREFIX}/lib/python', 'waf_render.py')

    bld.install_files('${PREFIX}/share/proto', '../proto/render/material_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../proto/render/render_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../proto/render/font_ddf.proto')

    apidoc_extract_task(bld, ['../proto/render/render_ddf.proto', 'render/render_script.cpp'])
