#! /usr/bin/env python
import os
from waf_dynamo import apidoc_extract_task
from waf_dynamo import dmsdk_add_files

def configure(conf):
    pass

def build(bld):
    script = bld.new_task_gen(features = 'cxx cc cstaticlib',
                          includes = '. script',
                          proto_gen_cc = False,
                          proto_gen_py = True,
                          protoc_includes = '. script',
                          target = 'script')

    script.find_sources_in_dirs(['script', '.'])

    if 'web' in bld.env.PLATFORM:
        script.source.remove(os.path.join('.','script_http.cpp'))
        script.source.remove(os.path.join('.', 'script_html5.cpp'))
    else:
        script.source.remove(os.path.join('.', 'script_http_js.cpp'))
        script.source.remove(os.path.join('.', 'script_html5_js.cpp'))

    # luabitop
    script.find_sources_in_dirs('bitop')

    # luasocket
    script.find_sources_in_dirs('luasocket')
    script.source.remove(os.path.join('luasocket', 'mime.c'))
    script.source.remove(os.path.join('luasocket', 'serial.c'))
    script.source.remove(os.path.join('luasocket', 'unix.c'))
    script.cflags = ['-DLUASOCKET_API=']
    if 'win32' in bld.env.PLATFORM:
        script.source.remove(os.path.join('luasocket', 'usocket.c'))
    else:
        script.source.remove(os.path.join('luasocket', 'wsocket.c'))

    # must not enable bytecode when building with --use-vanilla-lua
    if bld.env.LUA_BYTECODE_ENABLE_32 == 'yes':
        script.cxxflags = ['-DLUA_BYTECODE_ENABLE_32']
    if bld.env.LUA_BYTECODE_ENABLE_64 == 'yes':
        script.cxxflags = ['-DLUA_BYTECODE_ENABLE_64']

    dmsdk_add_files(bld, '${PREFIX}/sdk/include/dmsdk', 'dmsdk')

    # We must manually install script_doc_ddf_pb2.py as intall_path is None above
    # in order to avoid installation of dummylib
    bld.install_files('${PREFIX}/lib/python', 'script/script_doc_ddf_pb2.py')

    bld.add_group()

    apidoc_extract_task(bld, ['script.cpp','script_bitop.cpp','script_hash.cpp','script_html5_js.cpp','script_http.cpp','script_image.cpp','script_json.cpp','script_msg.cpp','script_sys.cpp','script_timer.cpp','script_vmath.cpp','script_zlib.cpp','luasocket/luasocket.doc_h','script/sys_ddf.proto'])

    bld.install_files('${PREFIX}/include/script', 'script.h')

    # for #imports to work for other projects
    # ..first for python
    ddf_ext = bld.new_task_gen(
         rule   = 'echo "" > ${TGT}',
         source = 'script/lua_source_ddf.proto script/ddf_script.proto',
         target = '__init__.py',
         shell = True)

    bld.install_files('${PREFIX}/share/script', 'script/lua_source_ddf.proto script/ddf_script.proto')
    bld.install_files('${PREFIX}/share/proto/script', 'script/ddf_script.proto script/sys_ddf.proto')
    bld.install_files('${PREFIX}/lib/python/script', '__init__.py')


    if 'web' in bld.env.PLATFORM:
        bld.install_files('${PREFIX}/lib/%s/js' % bld.env.PLATFORM, '../lib/js/library_script.js', postpone = False)

    bld.add_subdirs('test')
