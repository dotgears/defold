#! /usr/bin/env python

import os, re, wave, cStringIO, math, struct
import Task, TaskGen, Options
from waf_dynamo import copy_file_task
from TaskGen import extension, declare_extension

def gen_tone(task):
    tone_freq = int(task.generator.tone)
    sample_freq = int(task.generator.rate)
    sample_count = int(task.generator.frames)
    channels = int(task.generator.channels)
    ramp = bool(task.generator.ramp)

    f = wave.open(task.outputs[0].abspath(task.env), "wb")
    f.setnchannels(channels)
    f.setsampwidth(2)
    f.setframerate(sample_freq)
    buf = cStringIO.StringIO()

    frames = []
    for i in range(sample_count):
        a = 0.8 * 32768 * math.sin((i * 2.0 * math.pi * tone_freq) / sample_freq)
        if ramp:
            r = ((sample_count - 1) - i) / float(sample_count)
            a = a * r
        if channels == 1:
            buf.write(struct.pack('h', int(a)))
        else:
            buf.write(struct.pack('hh', int(a), int(a)))
    f.writeframes(buf.getvalue())
    f.close()

    return 0

def gen_dc(task):
    sample_freq = int(task.generator.rate)
    sample_count = int(task.generator.frames)
    channels = int(task.generator.channels)

    f = wave.open(task.outputs[0].abspath(task.env), "wb")
    f.setnchannels(channels)
    f.setsampwidth(2)
    f.setframerate(sample_freq)
    buf = cStringIO.StringIO()

    frames = []
    for i in range(sample_count):
        a = 0.8 * 32768
        if channels == 1:
            buf.write(struct.pack('h', int(a)))
        else:
            buf.write(struct.pack('hh', int(a), int(a)))
    f.writeframes(buf.getvalue())
    f.close()

    return 0

def build(bld):
    platform = bld.env['PLATFORM']

    if 'web' in platform:
        lib_dirs = {}
        lib_dirs['library_sound.js'] = '../src/js'
        bld.env['JS_LIB_PATHS'] = lib_dirs

    elif 'win32' in platform:
        src_dir = "%s/ext/lib/%s" % (bld.env['PREFIX'], platform)
        if not Options.options.skip_build_tests:
          copy_file_task(bld, "%s/OpenAL32.dll" % src_dir)
          copy_file_task(bld, "%s/wrap_oal.dll" % src_dir)

    wavs = ["booster_on_sfx.wav",
            "door_opening.wav",
            "drumloop.wav",
            "onefootstep.wav",
            "osc2_sin_440hz.wav",
            "def2938.wav"]

    if not Options.options.skip_build_tests:
      for rate in [22050, 32000, 44000, 44100]:
          for tone in [440, 2000]:
              for channels in [1, 2]:
                  frames = 2 * rate
                  name = '%s_tone_%d_%d_%d.wav' % (["mono", "stereo"][channels-1], tone, rate, frames)
                  wavs.append(name)
                  bld.new_task_gen(target = name,
                                   tone = tone,
                                   rate = rate,
                                   frames = frames,
                                   channels = channels,
                                   ramp = False,
                                   rule = gen_tone,)

      for rate in [32000]:
          for tone in [440]:
              channels = 1
              frames = 2 * rate
              name = '%s_toneramp_%d_%d_%d.wav' % (["mono", "stereo"][channels-1], tone, rate, frames)
              wavs.append(name)
              bld.new_task_gen(target = name,
                               tone = tone,
                               rate = rate,
                               frames = frames,
                               channels = channels,
                               ramp = True,
                               rule = gen_tone)

      for rate in [44100]:
          channels = 1
          frames = 2 * rate
          name = '%s_dc_%d_%d.wav' % (["mono", "stereo"][channels-1], rate, frames)
          wavs.append(name)
          bld.new_task_gen(target = name,
                           rate = rate,
                           frames = frames,
                           channels = channels,
                           ramp = True,
                           rule = gen_dc)

      bld.add_group()

    embedded_wavs = bld.new_task_gen(features = 'cxx cstaticlib embed test',
                                     target = 'embedded_wavs',
                                     source = 'dummy.cpp',  # Make waf happy
                                     embed_source = wavs)

    embedded_oggs = bld.new_task_gen(features = 'cxx cstaticlib embed test',
                                     target = 'embedded_oggs',
                                     source = 'dummy.cpp',  # Make waf happy
                                     embed_source = bld.path.ant_glob('**/*.ogg'))

    extra_libs = ''
    if 'web' not in bld.env['PLATFORM'] and 'win32' not in bld.env['PLATFORM']:
        exported_symbols = ["DefaultSoundDevice", "AudioDecoderWav", "AudioDecoderStbVorbis", "AudioDecoderTremolo"]
        extra_libs = ' TREMOLO'
        use_tremolo = True
    else:
        exported_symbols = ["DefaultSoundDevice", "AudioDecoderWav", "AudioDecoderStbVorbis"]
        use_tremolo = False

    if use_tremolo:
        test_sound_perf = bld.new_task_gen(features = 'cxx cprogram embed test',
                                      includes = '../../../src .',
                                      uselib = 'DMGLFW DLIB PLATFORM_SOCKET OPENAL CARES' + extra_libs ,
                                      uselib_local = 'sound embedded_wavs embedded_oggs',
                                      web_libs = ['library_sound.js'],
                                      exported_symbols = exported_symbols,
                                      target = 'test_sound_perf',
                                      source = 'test_sound_perf.cpp')
        test_sound_perf.install_path = None

    test_sound = bld.new_task_gen(features = 'cxx cprogram embed test',
                                  includes = '../../../src .',
                                  uselib = 'DMGLFW DLIB PLATFORM_SOCKET OPENAL CARES' + extra_libs,
                                  uselib_local = 'sound embedded_wavs embedded_oggs',
                                  web_libs = ['library_sound.js'],
                                  exported_symbols = exported_symbols,
                                  target = 'test_sound',
                                  source = 'test_sound.cpp')

    test_sound.install_path = None

    # test that the linkage doesn't break again
    exported_symbols = 'NullSoundDevice TestNullDevice'
    extra_libs = ''
    test_sound_null = bld.new_task_gen(features = 'cxx cprogram embed test',
                                  includes = '../../../src .',
                                  uselib = 'DMGLFW DLIB PLATFORM_SOCKET CARES' + extra_libs,
                                  uselib_local = 'sound_null embedded_wavs embedded_oggs',
                                  web_libs = ['library_sound.js'],
                                  exported_symbols = exported_symbols,
                                  target = 'test_sound_null',
                                  source = 'test_sound_null.cpp')

    test_sound_null.install_path = None
