#! /usr/bin/env python

VERSION = '0.1'
APPNAME = 'graphics'

srcdir = '.'
blddir = 'build'

import os, sys

import waf_ddf, waf_dynamo

def init():
    pass

def set_options(opt):
    opt.sub_options('src')
    opt.tool_options('waf_dynamo')

def configure(conf):
    conf.check_tool('waf_dynamo')
    waf_ddf.configure(conf)

    conf.sub_config('src')

    platform = conf.env['PLATFORM']

    if platform == "linux" or platform == "x86_64-linux":
        conf.env.append_value('CXXFLAGS', ['-DGL_GLEXT_PROTOTYPES', '-D_GLFW_HAS_GLXGETPROCADDRESS'])
    elif 'web' in platform:
        conf.env.append_value('CXXFLAGS', ['-DGL_GLEXT_PROTOTYPES'])

    if os.getenv('PYTHONPATH'):
        if sys.platform == "win32":
            ddf_search_lst = os.getenv('PYTHONPATH').split(';')
        else:
            ddf_search_lst = os.getenv('PYTHONPATH').split(':')

    dynamo_home = os.getenv('DYNAMO_HOME')
    if not dynamo_home:
        conf.fatal("DYNAMO_HOME not set")
    dynamo_ext = os.path.join(dynamo_home, "ext")

    if platform == "darwin" or platform == 'x86_64-darwin':
        conf.env.append_value('LINKFLAGS', ['-framework', 'Carbon', '-framework', 'OpenGL', '-framework', 'AGL', '-framework', 'IOKit', '-framework', 'CoreVideo'])
    elif platform == "armv7-darwin" or platform == "x86_64-ios":
        pass
    elif platform == "linux" or platform == "x86_64-linux":
        conf.env.append_value('LINKFLAGS', ['-lXext', '-lX11', '-lXi', '-lGL', '-lGLU', '-lpthread'])
    elif "win32" in platform:
        conf.env.append_value('LINKFLAGS', ['opengl32.lib'])

    conf.env.append_value('CPPPATH', "../src")
    conf.env.append_value('CPPPATH', os.path.join(dynamo_ext, "include"))
    conf.env.append_value('LIBPATH', os.path.join(dynamo_ext, "lib", platform))
    conf.env.append_value('CPPPATH', os.path.join(dynamo_home, "include" ))
    conf.env.append_value('CPPPATH', os.path.join(dynamo_home, "include", platform))

    conf.env.append_value('CCDEFINES', 'SDL_JOYSTICK_IOKIT')
    conf.env.append_value('CXXDEFINES', 'SDL_JOYSTICK_IOKIT')

    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="GRAPHICS"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="GRAPHICS"')

    conf.env['STATICLIB_DLIB'] = 'dlib'

    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="GRAPHICS"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="GRAPHICS"')

def build(bld):
    bld.add_subdirs('src')
    bld.install_files('${PREFIX}/include/win32', 'include/win32/*.h')

    bld.install_files('${PREFIX}/bin', 'bin/*', chmod=493)

def shutdown():
    waf_dynamo.run_tests(valgrind = True)
