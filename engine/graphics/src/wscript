#! /usr/bin/env python

import os, sys
from waf_dynamo import dmsdk_add_files
import Options

def set_options(opt):
    pass

def build(bld):
    obj = bld.new_task_gen(features = 'ddf cxx cstaticlib',
                           includes = ['. opengl', '../proto'],
                           proto_gen_py = True,
                           protoc_includes = '../proto',
                           uselib = 'DDF DLIB',
                           target = 'graphics')

    obj.find_sources_in_dirs('. opengl ../proto/graphics')
    if 'web' in bld.env.PLATFORM:
         obj.source.append('opengl/async/job_queue_sync.cpp');
    else:
         obj.source.append('opengl/async/job_queue_threaded.cpp');

    obj = bld.new_task_gen(features = 'ddf cxx cstaticlib',
                           includes = ['. vulkan', '../proto'],
                           proto_gen_py = True,
                           protoc_includes = '../proto',
                           uselib = 'DDF DLIB',
                           target = 'graphics_vulkan')

    obj.find_sources_in_dirs('. vulkan ../proto/graphics')

    if bld.env.PLATFORM == 'x86_64-darwin':
      obj.source.append('vulkan/macosx/graphics_vulkan_macosx_surface.mm')
    elif bld.env.PLATFORM == 'armv7-darwin' or bld.env.PLATFORM == 'arm64-darwin':
      obj.source.append('vulkan/ios/graphics_vulkan_ios_surface.mm')
    elif bld.env.PLATFORM == 'armv7-android' or bld.env.PLATFORM == 'arm64-android':
      obj.source.append('vulkan/android/graphics_vulkan_android_surface.cpp')
      obj.source.append('vulkan/android/graphics_vulkan_android.cpp')
    elif bld.env.PLATFORM == 'x86_64-linux':
      obj.source.append('vulkan/linux/graphics_vulkan_linux_surface.cpp')
    elif bld.env.PLATFORM == 'x86_64-win32' or bld.env.PLATFORM == 'win32':
      obj.source.append('vulkan/win32/graphics_vulkan_win32_surface.cpp')

    obj = bld.new_task_gen(features = 'ddf cxx cstaticlib',
                           includes = ['. null', '../proto'],
                           proto_gen_py = True,
                           protoc_includes = '../proto',
                           uselib = 'DDF DLIB',
                           target = 'graphics_null')

    obj.find_sources_in_dirs('. null ../proto/graphics')

    obj.source.remove(os.path.join('.','graphics_glfw_wrappers.cpp'))

    bld.install_files('${PREFIX}/include/graphics/', 'graphics.h')
    bld.install_files('${PREFIX}/include/graphics/', 'graphics_util.h')
    bld.install_files('${PREFIX}/include/graphics/', 'graphics_native.h')
    bld.install_files('${PREFIX}/include/graphics/opengl/win32', 'opengl/win32/glext.h')
    bld.install_files('${PREFIX}/include/graphics/opengl', 'opengl/graphics_opengl_defines.h')

    bld.install_files('${PREFIX}/share/proto', '../proto/graphics/graphics_ddf.proto')

    dmsdk_add_files(bld, '${PREFIX}/sdk/include/dmsdk', 'dmsdk')

    bld.install_files('${PREFIX}/bin', 'texc.py')
    bld.install_files('${PREFIX}/lib/python', 'dds.py')
    bld.install_files('${PREFIX}/lib/python', 'pvrtc.py')
    bld.install_files('${PREFIX}/lib/python', 'waf_graphics.py')

    if not Options.options.skip_build_tests:
        bld.add_subdirs('test')

def configure(conf):
    pass
