#! /usr/bin/env python
import os, re
from waf_dynamo import is_platform_private, platform_supports_feature
from BuildUtility import create_build_utility

def create_test(bld, name, extra_libs = None, extra_features = None, embed_source = None,
                extra_includes = None, extra_defines = None, skip_run = False):

    # Sometimes, we need to disable certain tests until they're supported
    if not platform_supports_feature(bld.env.PLATFORM, name, {}):
        print "Skipping test '%s' due to platform missing feature" % name
        return

    build_util = create_build_utility(bld.env)

    req_libs = ['CARES']
    req_defines = []

    if 'DM_IPV6_UNSUPPORTED' in os.environ:
        req_defines += ['DM_IPV6_UNSUPPORTED']

    req_features = ['cxx', 'cprogram']
    req_includes = ['../../src']
    req_embed = None

    if is_platform_private(bld.env.PLATFORM):
        req_includes.insert(0, '../dlib/%s' % build_util.get_target_os())

    platform_source = ''
    platform_source_path = '%s/test_platform.cpp' % build_util.get_target_os()
    if os.path.exists('src/test/' + platform_source_path):
        platform_source = ' ' + platform_source_path

    if not skip_run:
        req_features.append('test')
    if extra_features != None:
        req_features.extend(extra_features)
    if extra_libs != None:
        req_libs.extend(extra_libs)
    if extra_defines != None:
        req_defines.extend(extra_defines)

    if embed_source != None:
        req_embed = embed_source
    if extra_includes != None:
        req_includes.extend(extra_includes)

    task_args = {
        'features': ' '.join(req_features),
        'source': name + '.cpp' + ' testutil.cpp' + platform_source,
        'uselib': ' '.join(req_libs),
        'uselib_local': 'dlib mbedtls',
        'web_libs': ['library_sys.js'], # part of dlib, which we're testing
        'includes': req_includes,
        'defines': req_defines,
        'target': name
    }
    if req_embed != None:
        task_args['embed_source'] = ' '.join(req_embed)

    test = bld.new_task_gen(**task_args)
    test.install_path = None

    js_lib_paths = {}
    js_lib_paths['library_sys.js'] = '../src/dlib/js'
    test.env['JS_LIB_PATHS'] = js_lib_paths

def build(bld):

    bld.new_task_gen(features='javac seq',
                     classpath=os.pathsep.join(['../ext/jetty-all-7.0.2.v20100331.jar','../ext/servlet-api-2.5.jar']),
                     source_root='http_server')

    bld.env["JAVACFLAGS"] = '-g -source 1.7 -target 1.7'.split()

    extra_defines = []
    if bld.env.PLATFORM in ('armv7-darwin', 'arm64-darwin', 'x86_64-ios'):
        extra_defines = ['DM_NO_SYSTEM_FUNCTION'] # Needed because we wish to build the tests for all platforms, but not all platforms have the system() function

    skip_run = False
    if 'web' in bld.env['PLATFORM']:
        skip_run = True # Emscripten/Nodejs doesn't support popen()

    skip_http_run = False
    if 'win32' in bld.env['PLATFORM']:
        skip_http_run = True

    create_test(bld, 'test_memory')
    create_test(bld, 'test_align', extra_libs = ['THREAD'])
    create_test(bld, 'test_buffer')
    create_test(bld, 'test_math', extra_libs = ['THREAD'])
    create_test(bld, 'test_transform', extra_libs = ['THREAD'])
    create_test(bld, 'test_hashtable')
    create_test(bld, 'test_array')
    create_test(bld, 'test_indexpool')
    create_test(bld, 'test_dlib', extra_libs = ['THREAD'])
    create_test(bld, 'test_socket', extra_libs = ['PLATFORM_SOCKET', 'THREAD'])
    create_test(bld, 'test_time')
    create_test(bld, 'test_thread', extra_libs = ['THREAD'])
    create_test(bld, 'test_mutex', extra_libs =['THREAD'])
    create_test(bld, 'test_profile', extra_libs = ['THREAD'])
    create_test(bld, 'test_poolallocator', extra_libs = ['THREAD'])
    create_test(bld, 'test_memprofile', extra_libs = ['DL', 'PLATFORM_SOCKET', 'THREAD'])
    create_test(bld, 'test_message', extra_libs = ['PLATFORM_SOCKET', 'THREAD'])
    create_test(bld, 'test_configfile', extra_libs = ['PLATFORM_SOCKET', 'THREAD'])
    create_test(bld, 'test_dstrings', extra_libs = ['THREAD'])
    create_test(bld, 'test_httpclient', extra_libs = ['PLATFORM_SOCKET', 'THREAD'], extra_defines = extra_defines, skip_run = skip_http_run)
    create_test(bld, 'test_httpcache', extra_libs = ['PLATFORM_SOCKET', 'THREAD'], extra_defines = extra_defines, skip_run = skip_http_run)
    create_test(bld, 'test_httpserver', extra_libs = ['PLATFORM_SOCKET', 'THREAD'], extra_defines = extra_defines, skip_run = skip_http_run)
    create_test(bld, 'test_webserver', extra_libs = ['PLATFORM_SOCKET', 'THREAD'], extra_defines = extra_defines, skip_run = skip_http_run)
    create_test(bld, 'test_uri', extra_libs = ['THREAD'])
    create_test(bld, 'test_stringpool', extra_libs = ['THREAD'])

    # c-ares not supported for web platform
    if not 'web' in bld.env['PLATFORM']:
        create_test(bld, 'test_dns')

    bld.new_task_gen(rule = 'echo generated data > ${TGT}',
                     target = 'generated.embed')

    bld.add_group()

    create_test(bld, 'test_embed', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/test.embed', 'generated.embed'])
    create_test(bld, 'test_atomic', extra_libs = ['THREAD'])
    create_test(bld, 'test_spinlock', extra_libs = ['THREAD'])
    create_test(bld, 'test_sys', extra_libs = ['THREAD'], extra_defines = extra_defines)
    create_test(bld, 'test_template', extra_libs = ['THREAD'])
    create_test(bld, 'test_ssdp_internals', extra_libs = ['THREAD'])
    create_test(bld, 'test_ssdp', extra_libs = ['THREAD'], skip_run = skip_run)
    create_test(bld, 'test_log', extra_libs = ['THREAD'], skip_run = skip_http_run)
    create_test(bld, 'test_path', extra_libs = ['THREAD'])
    create_test(bld, 'test_trig_lookup', extra_libs = ['THREAD'])
    create_test(bld, 'test_vmath', extra_libs = ['THREAD'])
    create_test(bld, 'test_easing', extra_libs = ['THREAD'])
    create_test(bld, 'test_json', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/flickr.json'], extra_includes = ['.'])
    create_test(bld, 'test_utf8', extra_libs = ['THREAD'])

    create_test(bld, 'test_zlib', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/foo.gz', 'data/foo.deflate'])

    create_test(bld, 'test_lz4', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/foo.lz4'])

    create_test(bld, 'test_webp', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/webp_rgb_lossless.webp',
                                'data/webp_rgba_lossless.webp',
                                'data/webp_rgb_lossy.webp',
                                'data/webp_rgba_lossy.webp']
                )

    create_test(bld, 'test_image', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/color_check_2x2.png',
                                'data/color_check_2x2_premult.png',
                                'data/color_check_2x2_indexed.png',
                                'data/case2319.jpg',
                                'data/color16_check_2x2.png',
                                'data/gray_check_2x2.png',
                                'data/gray_alpha_check_2x2.png',
                                'data/defold_64.jpg',
                                'data/defold_64_progressive.jpg'],
                extra_includes = ['.']
                )

    create_test(bld, 'test_connection_pool', extra_features = ['embed'], extra_libs = ['THREAD'],
                extra_includes = ['.'], extra_defines = extra_defines)

    create_test(bld, 'test_pprint', extra_libs = ['THREAD'])
    create_test(bld, 'test_condition_variable', extra_libs = ['THREAD'])
    create_test(bld, 'test_objectpool')
    create_test(bld, 'test_crypt')
